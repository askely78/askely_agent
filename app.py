from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import os
from langdetect import detect
from openai import OpenAI
import requests

app = Flask(__name__)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üß† Stockage temporaire des profils utilisateurs (par num√©ro WhatsApp)
user_profiles = {}

def get_weather(city):
    api_key = os.getenv("OPENWEATHER_API_KEY")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=fr"
    try:
        response = requests.get(url)
        data = response.json()
        if data.get("cod") != 200:
            return f"Je n'ai pas pu trouver la m√©t√©o pour {city}."
        weather = data["weather"][0]["description"]
        temp = data["main"]["temp"]
        return f"La m√©t√©o √† {city} est actuellement : {weather}, avec une temp√©rature de {temp}¬∞C."
    except Exception:
        return "Une erreur est survenue en r√©cup√©rant la m√©t√©o."

def detect_intent(text):
    lowered = text.lower()
    if "je suis" in lowered and any(p in lowered for p in ["en couple", "solo", "avec enfants", "senior", "aventure", "romantique"]):
        return "profile_set"
    if any(greet in lowered for greet in ["bonjour", "salut", "hello", "hi", "hey"]):
        return "greeting"
    if "m√©t√©o" in lowered or "weather" in lowered:
        return "weather"
    if "recommande" in lowered or "recommend" in lowered or "h√¥tel" in lowered or "restaurant" in lowered:
        return "recommendation"
    if any(keyword in lowered for keyword in ["visiter", "tourisme", "√† voir", "√† faire", "guide", "lieux √†", "monuments", "touristique"]):
        return "tourism"
    if any(keyword in lowered for keyword in ["programme", "circuit", "itin√©raire", "planning", "jour par jour", "planning de visite"]):
        return "itinerary"
    return "chat"

def get_intro_by_lang(lang):
    if lang.startswith("fr"):
        return "üëã Bonjour ! Je suis Ask√©ly, votre assistant intelligent multilingue. Je peux vous aider √† organiser votre voyage, d√©couvrir les lieux √† visiter, conna√Ætre la m√©t√©o ou trouver les meilleures adresses locales."
    elif lang.startswith("en"):
        return "üëã Hello! I‚Äôm Ask√©ly, your smart multilingual assistant. I can help you discover tourist sites, check the weather, or find top local recommendations for your trip."
    else:
        return "üëã Hello! I‚Äôm Ask√©ly, your assistant. I can help with tourism, weather, recommendations and more!"

@app.route("/webhook/whatsapp", methods=["POST"])
def whatsapp_reply():
    incoming_msg = request.values.get('Body', '').strip()
    sender = request.values.get('From', '')
    lang = detect(incoming_msg)
    intent = detect_intent(incoming_msg)

    # Mise √† jour du profil utilisateur
    if intent == "profile_set":
        user_profiles[sender] = incoming_msg
        answer = "Merci ! Ton profil a bien √©t√© enregistr√©. Je personnaliserai d√©sormais mes r√©ponses selon tes pr√©f√©rences de voyage."

    elif intent == "greeting":
        answer = get_intro_by_lang(lang)

    elif intent == "weather":
        city = incoming_msg.split()[-1]
        answer = get_weather(city)

    elif intent == "recommendation":
        messages = [
            {"role": "system", "content": "Tu es Ask√©ly, un assistant intelligent qui recommande des lieux, h√¥tels et restaurants en fonction des besoins de l'utilisateur."},
            {"role": "user", "content": incoming_msg}
        ]
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages
        )
        answer = response.choices[0].message.content

    elif intent == "tourism":
        messages = [
            {"role": "system", "content": "Tu es Ask√©ly, un guide touristique virtuel expert du Maroc et du monde. Quand un utilisateur demande des conseils touristiques, propose-lui des id√©es de visites, d‚Äôactivit√©s culturelles, de monuments, de balades typiques et de sp√©cialit√©s locales."},
            {"role": "user", "content": incoming_msg}
        ]
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages
        )
        answer = response.choices[0].message.content

    elif intent == "itinerary":
        profil = user_profiles.get(sender, None)
        system_msg = "Tu es Ask√©ly, un expert en circuits touristiques internationaux. Propose des programmes jour par jour adapt√©s √† la destination demand√©e, √† la dur√©e et si disponible, au profil du voyageur."
        if profil:
            system_msg += f" Voici le profil de l'utilisateur : {profil}"
        messages = [
            {"role": "system", "content": system_msg},
            {"role": "user", "content": incoming_msg}
        ]
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages
        )
        answer = response.choices[0].message.content

    else:
        messages = [
            {"role": "system", "content": "Tu es Ask√©ly, un assistant IA multilingue qui r√©pond naturellement aux questions."},
            {"role": "user", "content": incoming_msg}
        ]
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages
        )
        answer = response.choices[0].message.content

    reply = MessagingResponse()
    reply.message(answer)
    return str(reply)
